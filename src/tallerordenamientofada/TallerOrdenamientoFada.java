
package tallerordenamientofada;

import java.util.Scanner;
import static tallerordenamientofada.RadixSortFada.radixsort;






public class TallerOrdenamientoFada {

    
    public static void main(String[] args) {
        

     //------------------------------------- RadixSort------------------------------------------   
      System.out.println("-------------------RadixSort---------------------------"); 
     RadixSortFada Radix1 =new RadixSortFada();
     int arr[] = {170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12,170, 45, 75, 90, 802, 24, 2, 66877, 567, 3456, 876, 467, 26, 934, 9876, 1, 4567, 8747, 5657, 34756, 8786, 4567, 216, 9534, 98776, 12, 45657};
       int n = arr.length;
       radixsort(arr, n);
       Radix1.print(arr, n);
    //----------------------------------------------RadixSort------------------------------------------  
    //----------------------------------------------QuickSort-----------------------------------------
      System.out.println("--------------------QuickSort---------------------------"); 
    int []arreglo = {8789,3748,1223,7847,8434,4784,3948,2732,8349,2388,23782,62612,5885,6584,6230,2762,47374,2632,8473,4783,
                         4374,38478,9323,2984,2383,1893,3484,3744,1091,23984,8558,7483,8347};
    long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecuci贸n
    TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Quicksort o = new Quicksort();
        o.quicksort(arreglo, 0, arreglo.length-1);
        for (int i = 0; i < arreglo.length; i++) {
             System.out.print(arreglo[i] + " ");
             //System.out.println();
        }
        System.out.println();
         TFin = System.currentTimeMillis(); //Tomamos la hora en que finaliz贸 el algoritmo y la almacenamos en la variable T
         tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
         System.out.println(" Tiempo de ejecuci贸n QuickSort en milisegundos: " + tiempo); //Mostramos en pantalla el tiempo de ejecuci贸n en milisegundos
          
     //----------------------------------------------QuickSort-----------------------------------------  



    }
}
    

